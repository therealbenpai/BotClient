import globals from "globals";
import js from "@eslint/js";
import tsEslint from "typescript-eslint";
import tsPlugin from "@typescript-eslint/eslint-plugin";
import TSParser from "@typescript-eslint/parser";
import jsdoc from "eslint-plugin-jsdoc";
import jsImport from "eslint-plugin-import";
import stylistic from "@stylistic/eslint-plugin"
import jsonc from "eslint-plugin-jsonc";
import yml from "eslint-plugin-yml";

export default tsEslint.config(
    js.configs.recommended, ...tsEslint.configs.recommended,
    {
        files: [
            'src/**/*.ts',
        ],
        languageOptions: {
            ecmaVersion: 6,
            globals: globals.node,
            sourceType: 'module',
            parser: TSParser,
            parserOptions: {
                project: true,
                tsconfigRootDir: import.meta.dirname,
            },
        },
        plugins: {
            jsdoc,
            ts: tsPlugin,
            import: jsImport,
            "@typescript_eslint": tsEslint,
            "@stylistic": stylistic,
            jsonc, yml
        },
        rules: {
            'arrow-body-style': ['error', 'as-needed'],
            'arrow-parens': ['error', 'as-needed'],
            'arrow-spacing': 'error',
            'brace-style': ['error', '1tbs', { allowSingleLine: true }],
            'comma-dangle': ['error', 'always-multiline'],
            'comma-spacing': 'error',
            'comma-style': 'error',
            'computed-property-spacing': 'error',
            'consistent-return': 'error',
            // 'curly': ['error', 'multi-or-nest'],
            'eol-last': 'error',
            'eqeqeq': 'error',
            'func-call-spacing': 'error',
            'indent': ['error', "tab"],
            'jsdoc/check-values': 'error',
            'jsdoc/require-description': 'error',
            'key-spacing': 'error',
            'keyword-spacing': 'error',
            'linebreak-style': 'error',
            'no-console': 'error',
            'prefer-const': 'error',
            'ts/adjacent-overload-signatures': 'error',
            'ts/array-type': 'error',
            'ts/await-thenable': 'error',
            'ts/class-literal-property-style': 'error',
            'ts/consistent-generic-constructors': 'error',
            'ts/consistent-indexed-object-style': 'error',
            'ts/consistent-type-assertions': 'error',
            'ts/consistent-type-definitions': 'error',
            'ts/no-array-constructor': 'error',
            'ts/no-base-to-string': 'error',
            'ts/no-confusing-non-null-assertion': 'error',
            'ts/no-duplicate-enum-values': 'error',
            'ts/no-duplicate-type-constituents': 'error',
            'ts/no-extra-non-null-assertion': 'error',
            'ts/no-floating-promises': 'error',
            'ts/no-implied-eval': 'error',
            'ts/no-inferrable-types': 'error',
            'ts/no-loss-of-precision': 'error',
            'ts/no-misused-new': 'error',
            'ts/no-misused-promises': 'error',
            'ts/no-non-null-asserted-optional-chain': 'error',
            'ts/no-redundant-type-constituents': 'error',
            'ts/no-this-alias': 'error',
            'ts/no-unnecessary-type-assertion': 'error',
            'ts/no-unnecessary-type-constraint': 'error',
            'ts/no-unsafe-assignment': 'error',
            'ts/no-unsafe-call': 'error',
            'ts/no-unsafe-declaration-merging': 'error',
            'ts/no-unsafe-enum-comparison': 'error',
            'ts/no-unsafe-member-access': 'error',
            'ts/no-var-requires': 'error',
            'ts/non-nullable-type-assertion-style': 'error',
            'ts/prefer-as-const': 'error',
            'ts/prefer-for-of': 'error',
            'ts/prefer-function-type': 'error',
            'ts/prefer-namespace-keyword': 'error',
            'ts/prefer-nullish-coalescing': 'error',
            'ts/prefer-optional-chain': 'error',
            'ts/prefer-string-starts-ends-with': 'error',
            'ts/require-await': 'error',
            'ts/restrict-plus-operands': 'error',
            'ts/restrict-template-expressions': 'error',
            'ts/triple-slash-reference': 'error',
            'ts/unbound-method': 'error',
            'camelcase': ['warn', { properties: 'never' }],
            'curly': 'warn',
            'dot-notation': 'warn',
            'no-constant-condition': 'warn',
            'no-empty': 'warn',
            'no-irregular-whitespace': 'warn',
            'no-prototype-builtins': 'warn',
            'no-template-curly-in-string': 'warn',
            'no-useless-escape': 'warn',
            'no-useless-rename': 'warn',
            'object-shorthand': 'warn',
            'prefer-template': 'warn',
            'no-extra-boolean-cast': 'off',
            'import/extensions': ['error', 'always'],
            'import/consistent-type-specifier-style': ['warn', 'prefer-top-level'],
            'import/no-cycle': 'warn',
            'import/no-self-import': 'error',
            'import/no-useless-path-segments': 'error',
            'no-nested-ternary': 'error',
            'no-var': 'warn',
            'no-useless-return': 'warn',
            "@typescript-eslint/no-unused-vars": [
                "error",
                {
                    "args": "all",
                    "argsIgnorePattern": "^_",
                    "caughtErrors": "all",
                    "caughtErrorsIgnorePattern": "^_",
                    "destructuredArrayIgnorePattern": "^_",
                    "varsIgnorePattern": "^_",
                    "ignoreRestSiblings": true
                }
            ],
            '@typescript-eslint/no-explicit-any': 'warn',
            '@typescript-eslint/no-this-alias': 'warn',
            '@stylistic/array-bracket-newline': ['warn', 'consistent'],
            '@stylistic/array-bracket-spacing': 'warn',
            '@stylistic/array-element-newline': ['warn', 'consistent'],
            '@stylistic/arrow-parens': 'warn',
            '@stylistic/arrow-spacing': 'warn',
            '@stylistic/block-spacing': 'warn',
            '@stylistic/brace-style': 'warn',
            '@stylistic/comma-dangle': ['warn', 'always-multiline'],
            '@stylistic/comma-spacing': 'warn',
            '@stylistic/comma-style': 'warn',
            '@stylistic/computed-property-spacing': 'warn',
            '@stylistic/dot-location': ['warn', 'property'],
            '@stylistic/eol-last': 'warn',
            '@stylistic/function-call-argument-newline': ['warn', 'consistent'],
            '@stylistic/function-call-spacing': 'warn',
            '@stylistic/function-paren-newline': ['warn', 'multiline-arguments'],
            '@stylistic/implicit-arrow-linebreak': 'warn',
            '@stylistic/indent': ['warn', 4, { SwitchCase: 1 }],
            '@stylistic/key-spacing': 'warn',
            '@stylistic/keyword-spacing': 'warn',
            // '@stylistic/linebreak-style': 'warn',
            '@stylistic/lines-between-class-members': ['warn', {
                enforce: [
                    { blankLine: 'never', prev: 'field', next: 'field' },
                    { blankLine: 'always', prev: '*', next: 'method' },
                ],
            }],
            '@stylistic/max-len': ['warn', { code: 130 }],
            '@stylistic/max-statements-per-line': 'warn',
            '@stylistic/multiline-ternary': ['warn', 'always-multiline'],
            '@stylistic/new-parens': 'warn',
            '@stylistic/newline-per-chained-call': 'warn',
            '@stylistic/no-extra-parens': 'warn',
            '@stylistic/no-extra-semi': 'warn',
            '@stylistic/no-multi-spaces': 'warn',
            '@stylistic/no-multiple-empty-lines': ['warn', { max: 2, maxEOF: 0, maxBOF: 0 }],
            '@stylistic/no-tabs': 'warn',
            '@stylistic/no-trailing-spaces': 'warn',
            '@stylistic/no-whitespace-before-property': 'warn',
            '@stylistic/object-curly-newline': 'warn',
            '@stylistic/object-curly-spacing': ['warn', 'always'],
            '@stylistic/object-property-newline': ['warn', { allowAllPropertiesOnSameLine: true }],
            '@stylistic/one-var-declaration-per-line': 'warn',
            '@stylistic/operator-linebreak': 'warn',
            '@stylistic/padded-blocks': ['warn', 'never'],
            '@stylistic/quote-props': ['warn', 'as-needed'],
            '@stylistic/quotes': ['warn', 'single'],
            '@stylistic/rest-spread-spacing': 'warn',
            '@stylistic/semi': 'warn',
            '@stylistic/semi-spacing': 'warn',
            '@stylistic/space-before-blocks': 'warn',
            '@stylistic/space-before-function-paren': ['warn', { named: 'never' }],
            '@stylistic/space-in-parens': 'warn',
            '@stylistic/space-infix-ops': 'warn',
            '@stylistic/space-unary-ops': 'warn',
            '@stylistic/spaced-comment': 'warn',
            '@stylistic/switch-colon-spacing': 'warn',
            '@stylistic/template-curly-spacing': 'warn',
            '@stylistic/template-tag-spacing': 'warn',
            '@stylistic/wrap-iife': 'warn',
            '@stylistic/yield-star-spacing': 'warn',
            'jsonc/array-bracket-newline': ['warn', 'consistent'],
            'jsonc/array-bracket-spacing': 'warn',
            'jsonc/array-element-newline': ['warn', 'consistent'],
            'jsonc/indent': 'warn',
            'jsonc/key-spacing': 'warn',
            'jsonc/no-irregular-whitespace': 'warn',
            'jsonc/object-curly-newline': 'warn',
            'jsonc/object-curly-spacing': ['warn', 'always'],
            'jsonc/object-property-newline': ['warn', { allowAllPropertiesOnSameLine: true }],
            /* 'json-schema-validator/no-invalid': ['error', {
                schemas: [
                    {
                        fileMatch: ['locale/*\/config.suml'],
                        schema: 'locale/config.schema.json',
                    },
                ],
            }] */
            'yml/flow-mapping-curly-spacing': ['warn', 'always'],
            'yml/no-irregular-whitespace': 'off',
            'yml/plain-scalar': 'off',
            'yml/quotes': ['warn', { prefer: 'single' }],
            // these two rules do not work well with inline lists
            'yml/block-sequence-hyphen-indicator-newline': 'off',
            'yml/indent': 'off',

            '@typescript-eslint/no-var-requires': 'off',
            'id-length': ['warn', { min: 3, exceptions: ['_', 'id', 'fs'] }],
            'no-restricted-syntax': [ // Stopping Array.of being used for conditionals, causing significantly more messy code
                'error',
                {
                    selector: 'CallExpression[callee.object.name=\'Array\'][callee.property.name=\'of\']',
                    message: 'Don\'t use \'Array.of\'.',
                },
            ],

        }
    })

